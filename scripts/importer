#!/usr/bin/env bash

FLASHBACK_PRACTICES_PATH="${FLASHBACK_PRACTICES_PATH:-$HOME/projects/references/books}"
FLASHBACK_PROGRESS_PATH="${FLASHBACK_PROGRESS_PATH:-$HOME/.cache/flashback}"
RESUMABLE=0

function get_help() {
    echo "flashback [-h] [-r]"
    echo
    echo "options"
    echo
    echo " -h,--help            print help menu"
    echo " -r,--reset           restart progress"
    echo
}

while [ $# -gt 0 ]
do
    case "$1" in
        -h|--help) get_help ;;
        -r|--reset) rm "$FLASHBACK_PROGRESS_PATH/progress" ;;
    esac
    shift
done

[ -d "$FLASHBACK_PROGRESS_PATH" ] || mkdir "$FLASHBACK_PROGRESS_PATH"

trap "stop_shell" SIGINT

function stop_shell() {
    local bold="\e[31m"
    local mark="\e[1;31m"
    local reset="\e[0m"

    echo -ne "\b\b${bold}saving progress at${reset} "
    echo -ne "${mark}$title${reset} "
    echo -ne "${bold}chapter${reset} ${mark}${chapter}${reset} "
    echo -e "${bold}practice${reset} ${mark}$((--practice))${reset}"
    echo "$title $chapter $practice" > "$FLASHBACK_PROGRESS_PATH/progress"
    exit
}

function show_time_duration() {
    local duration="$1"
    local hours=0
    local minutes=0
    local seconds=0

    while [ "$duration" -ne 0 ]
    do
        if [ "$duration" -gt 3600 ]
        then
            hours="$((hours + 1))"
            duration="$((duration - 3600))"
        elif [ "$duration" -gt 60 ]
        then
            minutes="$((minutes + 1))"
            duration="$((duration - 60))"
        else
            seconds="$duration"
            duration=0
        fi
    done

    [ "$hours" -gt 0 ]   && echo -n "${hours}h "
    [ "$minutes" -gt 0 ] && echo -n "${minutes}m "
    [ "$seconds" -gt 0 ] && echo -n "${seconds}s"
    echo
}

if [ -s "$FLASHBACK_PROGRESS_PATH/progress" ]
then
    LATEST_PROGRESS="$(cat "$FLASHBACK_PROGRESS_PATH/progress")"
    RESUMABLE=1
fi

# iterate over books and initialize all of their practices in construction.
for book in "$FLASHBACK_PRACTICES_PATH"/*
do
    chapter_scope=0
    body_scope=0
    references_scope=0
    chapter=0
    practice=0
    progress=

    title="$(sed -n '1s/^# \[\(.*\)\](\(.*\))$/\1/p' "$book")"
    link="$(sed -n '1s/^# \[\(.*\)\](\(.*\))$/\2/p'  "$book")"

    resource_begin="$(sed -n '1,/^## /=' "$book" | tail -n2 | head -n1)"

    base_command="psql -U postgres -h localhost -d flashback"
    sql_command_with_return="$base_command -A --csv -c"
    insertion_sql_command="$base_command -c"

    qtitle="${title//\'/\'\'}"
    qlink="${link//\'/\'\'}"

    brief_title="$title"
    [ "${#title}" -gt 25 ] && brief_title="${title:0:30}..."

    printf "\e[1;35m%8s\e[1;34m %-63s" "Resource" "$brief_title"

    query_sql="select id from resources where name = '$qtitle';"
    insert_sql="insert into resources (name, purchase_link) values ('$qtitle', '$qlink') returning id;"

    resource_id="$($sql_command_with_return "$query_sql" 2>>/tmp/importer.log | sed '1d' | grep -v 'INSERT')"

    if [ -z "$resource_id" ]
    then
        resource_id="$($sql_command_with_return "$insert_sql" 2>>/tmp/importer.log | sed '1d' | grep -v 'INSERT')"
        echo -e "\e[1;32m"" Imported\e[0m"
    else
        echo -e "\e[1;35m"" Already exists\e[0m"
    fi

    while IFS= read -r line
    do
        if [ "$line" == "<details>" ]
        then
            if [ "$references_scope" -eq 1 ]
            then
                if [ "${RESUMABLE:-0}" -eq 1 ] && [ "$progress" == "$LATEST_PROGRESS" ]
                then
                    RESUMABLE=0
                    LATEST_PROGRESS=
                fi

                brief_note="$note_title"
                [ "${#note_title}" -gt 60 ] && brief_note="${brief_note:0:60}..."

                printf '\e[1;35m%-8s\e[1;34m %-63s' "Note" "$brief_note"

                qnote_title="${note_title//\'/\'\'}"
                note_description="$(sed "s/'/''/g" /tmp/note_description.txt)"
                qnote_position="${note_position//\'/\'\'}"

                insert_sql="insert into notes (title, description, position, resource) values ('$qnote_title', '$note_description', '$qnote_position', $resource_id);"

                if $insertion_sql_command "$insert_sql" &>>/tmp/importer.log
                then
                    echo -e "\e[1;32m"" Imported\e[0m"
                else
                    echo -e "\e[1;31m"" Failed\e[0m"
                fi

                #echo "resource ($resource_id): $title"
                #echo "note title: $note_title"
                #echo "note position: $note_position"
                #echo -e "note description: \e[1;36m${note_description}\e[0m"

                #echo -e "\e[1;33m"'<<< wrap up practice'"\e[0m"
                # - title => note_title
                # - description => note_description
                # - position => note_position
                # - resource => resource_id
                # - collected => false (default)
                # - collectable => true (default)
                # - reference =>
            fi

            ((++practice))
            progress="$title $chapter $practice"
            references_scope=0
            body_scope=1
            exec 3> /tmp/note_description.txt
        elif [ "$line" == "</details>" ]
        then
            references_scope=1
            body_scope=0
            exec 3<&-
        elif [ "${line:0:9}" == "<summary>" ]
        then
            note_title="${line:9:-10}"
        elif [ "${line:0:3}" == "## " ]
        then
            if [ "$body_scope" -eq 1 ] || [ "$references_scope" -eq 1 ]
            then
                if [ "${RESUMABLE:-0}" -eq 1 ] && [ "$progress" == "$LATEST_PROGRESS" ]
                then
                    RESUMABLE=0
                    LATEST_PROGRESS=
                fi

                brief_note="$note_title"
                [ "${#note_title}" -gt 60 ] && brief_note="${brief_note:0:60}..."

                printf '\e[1;35m%-8s\e[1;34m %-63s' "Note" "$brief_note"

                qnote_title="${note_title//\'/\'\'}"
                note_description="$(sed "s/'/''/g" /tmp/note_description.txt)"
                qnote_position="${note_position//\'/\'\'}"

                insert_sql="insert into notes (title, description, position, resource) values ('$qnote_title', '$note_description', '$qnote_position', $resource_id);"

                if $insertion_sql_command "$insert_sql" &>>/tmp/importer.log
                then
                    echo -e "\e[1;32m"" Imported\e[0m"
                else
                    echo -e "\e[1;31m"" Failed\e[0m"
                fi

                body_scope=0
                references_scope=0
            fi

            if [ "$chapter_scope" -eq 0 ]
            then
                chapter="${line#*Chapter }"
                chapter_scope=1
                #echo -e "\e[1;37m"">>> beginning of chapter $chapter""\e[0m"
            else
                #echo -e "\e[1;37m""<<< end of chapter $chapter""\e[0m\n"
                chapter="${line#*Chapter }"
                #echo -e "\e[1;37m"">>> beginning of chapter $chapter""\e[0m"
            fi

            note_position="Chapter $chapter"
        elif [ "${#line}" -eq 0 ] && [ "$body_scope" -eq 0 ]
        then
            continue
        else
            if [ "$body_scope" -eq 1 ]
            then
                echo "$line" >&3
            elif [ "$references_scope" -eq 1 ]
            then
                note_references+=("${line#\* }")
            fi
        fi
    done <<< "$(sed "1,${resource_begin}d" "$book")"

    if [ "$references_scope" -eq 1 ]
    then
        references_scope=0
    fi

    if [ "$body_scope" -eq 1 ]
    then
        body_scope=0
    fi

    if [ "$chapter_scope" -eq 1 ]
    then
        chapter_scope=0
    fi
done
